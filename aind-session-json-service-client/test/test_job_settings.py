# coding: utf-8

"""
    aind-session-json-service

     ## aind-session-json-service  Run metadata mapper to create a session metadata  

    The version of the OpenAPI document: 0.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_session_json_service_client.models.job_settings import JobSettings

class TestJobSettings(unittest.TestCase):
    """JobSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobSettings:
        """Test JobSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobSettings`
        """
        model = JobSettings()
        if include_optional:
            return JobSettings(
                job_settings_name = 'Bergamo',
                input_source = None,
                output_directory = None,
                user_settings_config_file = None,
                experimenter_full_name = [
                    ''
                    ],
                subject_id = '',
                imaging_laser_wavelength = 56,
                fov_imaging_depth = 56,
                fov_targeted_structure = '',
                notes = '',
                mouse_platform_name = 'Standard Mouse Tube',
                active_mouse_platform = True,
                session_type = 'BCI',
                iacuc_protocol = '2109',
                rig_id = '442 Bergamo 2p photostim',
                behavior_camera_names = [
                    ''
                    ],
                ch1_filter_names = [
                    ''
                    ],
                ch1_detector_name = 'Green PMT',
                ch1_daq_name = 'PXI',
                ch2_filter_names = [
                    ''
                    ],
                ch2_detector_name = 'Red PMT',
                ch2_daq_name = 'PXI',
                imaging_laser_name = 'Chameleon Laser',
                photostim_laser_name = 'Monaco Laser',
                stimulus_device_names = [
                    ''
                    ],
                photostim_laser_wavelength = 56,
                fov_coordinate_ml = None,
                fov_coordinate_ap = 1.337,
                fov_reference = 'Bregma',
                starting_lickport_position = [
                    1.337
                    ],
                behavior_task_name = 'single neuron BCI conditioning',
                hit_rate_trials_0_10 = 1.337,
                hit_rate_trials_20_40 = 1.337,
                total_hits = 1.337,
                average_hit_rate = 1.337,
                trial_num = 1.337,
                timezone = 'US/Pacific'
            )
        else:
            return JobSettings(
                experimenter_full_name = [
                    ''
                    ],
                subject_id = '',
                imaging_laser_wavelength = 56,
                fov_imaging_depth = 56,
                fov_targeted_structure = '',
                notes = '',
        )
        """

    def testJobSettings(self):
        """Test JobSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
